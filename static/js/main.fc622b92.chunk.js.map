{"version":3,"sources":["components/Dynamic.js","components/Events.js","components/Methods.js","components/Simple.js","components/ModuleDrag.js","components/ModuleChart.js","components/License.js","App.js","reportWebVitals.js","index.js"],"names":["Dynamic","randomData","count","Array","map","Math","floor","random","useState","type","series","values","config","setConfig","shuffle","state","useEffect","interval","setInterval","clearInterval","JSON","stringify","data","Events","events","value","index","output","setOutput","renderState","setRenderState","className","complete","node_mouseover","info","ev","Methods","chart","useRef","nSets","setNSets","onClick","current","addplot","n","ref","Simple","ModuleDrag","startingValues","goals","countGoodDays","vs","gs","i","goodDays","setGoodDays","title","text","subtitle","plot","valueBox","color","placement","scaleX","labels","tooltip","borderRadius","borderWidth","fontSize","shadow","dataDragging","goal","backgroundColor","rules","rule","height","modules","zingchart_plugins_dragging_complete","getseriesdata","ModuleChart","shapes","options","name","ignore","zingchart","DEV","KEEPSOURCE","COPYDATA","LICENSE","License","graphset","width","x","y","App","to","isActive","exact","path","element","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fc622b92.chunk.js","sourcesContent":["/*\n * A dynamically updating line plot. Demonstrates modifying the\n * configuration of an existing ZingChart.\n */\nimport React, {useState, useEffect} from 'react';\nimport 'zingchart/es6';\nimport ZingChart from 'zingchart-react';\n\nfunction Dynamic() {\n  const nValues = 10;\n  const period = 1000;  // milliseconds\n\n  // Return an array of `count` random values \n  const randomData = (count) => [...Array(count)].map(() => Math.floor(Math.random() * 10))\n\n  const [config, setConfig] = useState({\n    type: 'line',\n    series: [\n      {values: randomData(nValues)}\n    ]\n  });\n\n  /*\n   * Set a new random dataset\n   */\n  function shuffle() {\n    setConfig(state => ({...state, series: [{values: randomData(nValues)}]}));\n  }\n\n  // Create an effect to periodically update the chart data\n  useEffect(() => {\n    const interval = setInterval(shuffle, period);\n\n    // Invoked to clean up when unmounted\n    return () => clearInterval(interval);\n  })\n\n\treturn <div>\n      <div>{JSON.stringify(config.series[0].values)}</div>\n      <ZingChart data={config} />\n    </div>\n}\n\nexport default Dynamic;","/*\n * A line chart with events logged to a text box. \n */\nimport React, {useState} from 'react';\nimport 'zingchart/es6';\nimport ZingChart from 'zingchart-react';\n\nfunction Events() {\n  const listOfEventListeners = ['complete', 'node_mouseover'];\n  const events = listOfEventListeners.map((value, index) => (<li key={index}>{value}</li>));\n\n  const [config] = useState({\n    type: 'line',\n    series: [{\n      values: [4,5,3,4,5,3,5,4,11]\n    }]\n  });\n\n  const [output, setOutput] = useState('');\n  const [renderState, setRenderState] = useState('pending');\n\n  /*\n   * Invoked when the chart has finished rendering\n   */\n  function chartDone() {\n    setRenderState('rendered');\n  }\n\n  /*\n   * Handle the info relating to the node under the cursor\n   */\n  function nodeInfo(info) {\n    delete info.ev;     // Remove the event data\n    setOutput(`Node Info\\n${JSON.stringify(info,null,2)}\\n`)\n  }\n\n  return (\n    <div className=\"Events-wrapper\">\n      <ZingChart data={config} complete={chartDone} node_mouseover={nodeInfo} />\n      <div className=\"Events-output\">\n        <h2>Output from events</h2>\n        <div className=\"Events-bound\">\n          Events bound:\n          <ul>{events}</ul>\n        </div>\n        <div className=\"Events-renderState\">Chart is {renderState}</div>\n        <pre className=\"Events-nodeInfo\">{output}</pre>\n      </div>\n    </div>\n  );\n}\n\nexport default Events;","/*\n * A bar chart with a button that adds additional data. Demonstrates\n * using a reference to a ZingChart element.\n */\nimport React, {useState, useRef} from 'react';\nimport 'zingchart/es6';\nimport ZingChart from 'zingchart-react';\n\nfunction Methods() {\n  const nValues = 10;\n\n  // Return an array of `count` random values \n  const randomData = (count) => [...Array(count)].map(() => Math.floor(Math.random() * 10))\n\n  const chart = useRef(null);\n  const [nSets, setNSets] = useState(1);\n  const [config] = useState({\n    type: 'bar',\n    series: [{\n      values: randomData(nValues)\n    }]\n  });\n\n  /*\n   * Add an additional dataset to the existing barchart\n   */\n  function addDataset() {\n    chart.current.addplot({\n      data: {\n        values: randomData(nValues),\n      }\n    })\n\n    setNSets(n => n + 1)\n  }\n\n\treturn <div>\n      <button onClick={addDataset}>Add dataset {nSets + 1}</button>\n      <ZingChart ref={chart} data={config} />\n    </div>\n}\n\nexport default Methods;","/*\n * Simplest demo, just a bar chart of static data\n */\nimport React, {useState} from 'react';\nimport 'zingchart/es6';\nimport ZingChart from 'zingchart-react';\n\nfunction Simple() {\n  const [config] = useState({\n    type: 'bar',\n    series: [{\n      values: [4,5,3,4,5,3,5,4,11]\n    }]\n  })\n\n\treturn <ZingChart data={config} />\n}\n\nexport default Simple;","/*\n * Demonstrate interacting with a chart to change its data\n * using the dragging module. Note that the module is imported\n * and then passed as a prop to the ZingChart component.\n */\nimport React, {useState, useRef} from 'react';\nimport 'zingchart/es6';\nimport ZingChart from 'zingchart-react';\nimport 'zingchart/modules-es6/zingchart-dragging.min.js'\n\nfunction ModuleDrag() {\n  const startingValues = [20, 40, 14, 50, 15, 35, 5];\n  const goals = [25, 43, 30, 40, 21, 59, 35];\n\n  // Compare values to goals and return count of goals met\n  function countGoodDays(vs, gs) {\n    let n = 0;\n\n    for(const i in vs)\n      if(vs[i] >= gs[i]) n++;\n\n    return n;\n  }\n  \n  const chart = useRef(null);\n  const [goodDays, setGoodDays] = useState(countGoodDays(startingValues, goals));\n  const [config] = useState({   \n    type: 'vbullet',\n    title: {\n      text: 'Pushups Per Day'\n    },\n    subtitle: {\n      text: 'Bars are draggable'\n    },\n    plot: {\n      valueBox: [\n        {\n          type: 'all',\n          text: '[%node-value / %node-goal-value]',\n          color: '#000',\n          placement: 'goal'\n        }\n      ]\n    },\n    scaleX: {\n      labels: ['Mon', 'Tues', 'Wed', 'Thur', 'Fri', 'Sat', 'Sun']\n    },\n    tooltip: {\n      borderRadius: '3px',\n      borderWidth: '0px',\n      fontSize: '14px',\n      shadow: true\n    },\n    series: [\n      {\n        values: startingValues,\n        dataDragging: true,\n        goal: {\n          backgroundColor: '#64b5f6',\n          borderWidth: '0px'\n        },\n        goals: goals,\n        rules: [\n          {\n            backgroundColor: '#81c784',\n            rule: '%v >= %g'\n          },\n          {\n            backgroundColor: '#ef5350',\n            rule: '%v < %g/2'\n          },\n          {\n            backgroundColor: '#ffca28',\n            rule: '%v >= %g/2 && %v < %g'\n          }\n        ]\n      }\n    ]\n  })\n\n  /*\n   * Update the number of days the goals have been met\n   */\n  function showData() {\n    const data = chart.current.getseriesdata();\n\n    setGoodDays(countGoodDays(data[0].values, data[0].goals));\n  }\n\n  return <div>\n    <div>Goals met {goodDays} days this week</div>\n    <ZingChart ref={chart} data={config} height='600px' modules='dragging' zingchart_plugins_dragging_complete={showData}/>\n  </div>\n}\n\nexport default ModuleDrag;","/*\n * Vector map of the 48 US states. Demonstrates explicitly importing\n * ZingChart modules.\n */\nimport React, {useState} from 'react';\nimport 'zingchart/es6';\nimport ZingChart from 'zingchart-react';\nimport 'zingchart/modules-es6/zingchart-maps.min.js'\nimport 'zingchart/modules-es6/zingchart-maps-usa.min.js'\n\nfunction ModuleChart() {\n  const [config] = useState({\n    shapes: [\n      {\n        type: 'zingchart.maps',\n        options: {\n          name: 'usa',\n          ignore: ['AK', 'HI']\n        }\n      }\n    ]\n  })\n\n  return <ZingChart data={config} height='600px'/>\n}\n\nexport default ModuleChart;","/*\n * Demonstrate setting the license key and performance\n * flags on the ZingChart object, as well as multiple \n * plots in one chart.\n */\nimport React, {useState} from 'react';\nimport zingchart from 'zingchart/es6';\nimport ZingChart from 'zingchart-react';\n\n// Set performance flags on the ZingChart object\nzingchart.DEV.KEEPSOURCE = 0; // prevents lib from storing the original data package\nzingchart.DEV.COPYDATA = 0; // prevents lib from creating a copy of the data package \n\n// Set the license key on the ZingChart object\nzingchart.LICENSE = ['abcdefghijklmnopqrstuvwxy'];\n\nfunction License() {\n  const [config] = useState({\n    /* Graphset array */\n    graphset: [\n      { /* Object containing chart data */\n        type: 'line',\n        /* Size your chart using height/width attributes */\n        height: '200px',\n        width: '90%',\n        /* Position your chart using x/y attributes */\n        x: '5%',\n        y: '5%',\n        series:[\n          {\n            values:[76,23,15,85,13]\n          },\n          {\n            values:[36,53,65,25,45]\n          }\n        ]\n      },\n      { /* Object containing chart data */\n        type: 'funnel',\n        height: '55%',\n        width: '45%',\n        x: '5%',\n        y: '200px',\n        series:[\n          {values:[30]},\n          {values:[15]},\n          {values:[5]},\n          {values:[3]}\n        ]\n      },\n      {\n        type: 'pie',\n        height: '55%',\n        width: '45%',\n        x: '50%',\n        y: '200px',\n        series:[\n          {values:[15]},\n          {values:[30]},\n          {values:[34]}\n        ]\n      }\n    ]\n  })\n\n\treturn <ZingChart data={config} />\n}\n\nexport default License;\n","/*\n * Top-level component consisting of a set of buttons, one\n * for each demo, and the corresponding demo chart.\n */\nimport './App.css';\nimport React from 'react';\nimport {Routes, Route, NavLink} from 'react-router-dom';\n\nimport Dynamic from './components/Dynamic.js';\nimport Events from './components/Events.js';\nimport Methods from './components/Methods.js';\nimport Simple from './components/Simple.js';\nimport ModuleDrag from './components/ModuleDrag.js';\nimport ModuleChart from './components/ModuleChart.js';\nimport License from './components/License.js';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h2>zingchart-react Demo</h2>\n        <h6>A simple example of binding data, mutations with methods, and listening to events</h6>\n        <div className=\"App-buttonbar\">\n          <NavLink to=\"/\" className={({isActive}) => isActive ? \"App-button-active\" : \"App-button-plain\"}>Simple</NavLink>\n          <NavLink to=\"/module-chart\" className={({isActive}) => isActive ? \"App-button-active\" : \"App-button-plain\"}>Module Chart</NavLink>\n          <NavLink to=\"/module-drag\" className={({isActive}) => isActive ? \"App-button-active\" : \"App-button-plain\"}>Module Drag</NavLink>\n          <NavLink to=\"/dynamic\" className={({isActive}) => isActive ? \"App-button-active\" : \"App-button-plain\"}>Dynamic</NavLink>\n          <NavLink to=\"/events\" className={({isActive}) => isActive ? \"App-button-active\" : \"App-button-plain\"}>Events</NavLink>\n          <NavLink to=\"/methods\" className={({isActive}) => isActive ? \"App-button-active\" : \"App-button-plain\"}>Methods</NavLink>\n          <NavLink to=\"/license\" className={({isActive}) => isActive ? \"App-button-active\" : \"App-button-plain\"}>License</NavLink>\n        </div>\n      </header>\n      <Routes>\n        <Route exact path=\"/\" element={<Simple />} />\n        <Route path=\"/module-chart\" element={<ModuleChart />} />\n        <Route path=\"/module-drag\" element={<ModuleDrag />} />\n        <Route path=\"/dynamic\" element={<Dynamic />} />\n        <Route path=\"/events\" element={<Events />} />\n        <Route path=\"/methods\" element={<Methods />} />\n        <Route path=\"/license\" element={<License />} />\n      </Routes>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {BrowserRouter} from 'react-router-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}